// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: blogs.sql

package postgres

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createBlog = `-- name: CreateBlog :one
INSERT INTO blogs(author_id, title, summary, content)
VALUES ($1, $2, $3, $4)
RETURNING id, author_id, title, summary, content, created_at, updated_at, removed_at
`

type CreateBlogParams struct {
	AuthorID int64  `json:"authorId"`
	Title    string `json:"title"`
	Summary  string `json:"summary"`
	Content  string `json:"content"`
}

func (q *Queries) CreateBlog(ctx context.Context, arg CreateBlogParams) (Blog, error) {
	row := q.db.QueryRow(ctx, createBlog,
		arg.AuthorID,
		arg.Title,
		arg.Summary,
		arg.Content,
	)
	var i Blog
	err := row.Scan(
		&i.ID,
		&i.AuthorID,
		&i.Title,
		&i.Summary,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RemovedAt,
	)
	return i, err
}

const getBlog = `-- name: GetBlog :one
SELECT id, author_id, title, summary, content, created_at, updated_at, removed_at FROM blogs WHERE id = $1
`

func (q *Queries) GetBlog(ctx context.Context, id int64) (Blog, error) {
	row := q.db.QueryRow(ctx, getBlog, id)
	var i Blog
	err := row.Scan(
		&i.ID,
		&i.AuthorID,
		&i.Title,
		&i.Summary,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RemovedAt,
	)
	return i, err
}

const getBlogPublic = `-- name: GetBlogPublic :one
SELECT
    b.title,
    b.summary,
    b.content,
    b.created_at,
    b.updated_at,
    u.full_name as author_name,
    u.username  as author_username,
    u.about_me  as author_about
FROM blogs b
JOIN users u ON u.id = b.author_id
WHERE
    b.id = $1 and 
    b.removed_at is null and
    u.is_banned = false
`

type GetBlogPublicRow struct {
	Title          string             `json:"title"`
	Summary        string             `json:"summary"`
	Content        string             `json:"content"`
	CreatedAt      pgtype.Timestamptz `json:"createdAt"`
	UpdatedAt      pgtype.Timestamptz `json:"updatedAt"`
	AuthorName     string             `json:"authorName"`
	AuthorUsername string             `json:"authorUsername"`
	AuthorAbout    *string            `json:"authorAbout"`
}

func (q *Queries) GetBlogPublic(ctx context.Context, id int64) (GetBlogPublicRow, error) {
	row := q.db.QueryRow(ctx, getBlogPublic, id)
	var i GetBlogPublicRow
	err := row.Scan(
		&i.Title,
		&i.Summary,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AuthorName,
		&i.AuthorUsername,
		&i.AuthorAbout,
	)
	return i, err
}

const listAuthorBlogs = `-- name: ListAuthorBlogs :many
SELECT
    b.id,
    b.title,
    b.summary,
    b.created_at as published_at
FROM blogs b
JOIN users u ON u.id = b.author_id
WHERE 
    b.removed_at is null
    and u.is_banned = false
    and u.username = $1
ORDER BY b.created_at
`

type ListAuthorBlogsRow struct {
	ID          int64              `json:"id"`
	Title       string             `json:"title"`
	Summary     string             `json:"summary"`
	PublishedAt pgtype.Timestamptz `json:"publishedAt"`
}

func (q *Queries) ListAuthorBlogs(ctx context.Context, username string) ([]ListAuthorBlogsRow, error) {
	rows, err := q.db.Query(ctx, listAuthorBlogs, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListAuthorBlogsRow{}
	for rows.Next() {
		var i ListAuthorBlogsRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Summary,
			&i.PublishedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listBlogs = `-- name: ListBlogs :many
SELECT
    b.id,
    b.title,
    b.removed_at is not null as is_removed,
    u.username as author_username
FROM blogs b
JOIN users u ON u.id = b.author_id
ORDER BY b.created_at DESC
`

type ListBlogsRow struct {
	ID             int64       `json:"id"`
	Title          string      `json:"title"`
	IsRemoved      interface{} `json:"isRemoved"`
	AuthorUsername string      `json:"authorUsername"`
}

func (q *Queries) ListBlogs(ctx context.Context) ([]ListBlogsRow, error) {
	rows, err := q.db.Query(ctx, listBlogs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListBlogsRow{}
	for rows.Next() {
		var i ListBlogsRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.IsRemoved,
			&i.AuthorUsername,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listBlogsCount = `-- name: ListBlogsCount :one
SELECT count(1) FROM blogs
`

func (q *Queries) ListBlogsCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, listBlogsCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const listBlogsPublic = `-- name: ListBlogsPublic :many
SELECT
    b.id,
    b.title,
    b.summary,
    u.full_name as author_name,
    b.created_at as published_at
FROM blogs b
JOIN users u ON u.id = b.author_id
WHERE 
    b.removed_at is null
    and u.is_banned = false
ORDER BY b.created_at
`

type ListBlogsPublicRow struct {
	ID          int64              `json:"id"`
	Title       string             `json:"title"`
	Summary     string             `json:"summary"`
	AuthorName  string             `json:"authorName"`
	PublishedAt pgtype.Timestamptz `json:"publishedAt"`
}

func (q *Queries) ListBlogsPublic(ctx context.Context) ([]ListBlogsPublicRow, error) {
	rows, err := q.db.Query(ctx, listBlogsPublic)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListBlogsPublicRow{}
	for rows.Next() {
		var i ListBlogsPublicRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Summary,
			&i.AuthorName,
			&i.PublishedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listBlogsPublicCount = `-- name: ListBlogsPublicCount :one
SELECT count(1) 
FROM blogs b
JOIN users u ON u.id = b.author_id
WHERE 
    b.removed_at is null
    and u.is_banned = false
`

func (q *Queries) ListBlogsPublicCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, listBlogsPublicCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const removeBlog = `-- name: RemoveBlog :exec
UPDATE blogs
SET removed_at = NOW()
WHERE id = $1
`

func (q *Queries) RemoveBlog(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, removeBlog, id)
	return err
}

const updateBlog = `-- name: UpdateBlog :exec
UPDATE blogs
SET 
    title = $2,
    summary = $3,
    content = $4,
    updated_at = NOW()
WHERE id = $1
`

type UpdateBlogParams struct {
	ID      int64  `json:"id"`
	Title   string `json:"title"`
	Summary string `json:"summary"`
	Content string `json:"content"`
}

func (q *Queries) UpdateBlog(ctx context.Context, arg UpdateBlogParams) error {
	_, err := q.db.Exec(ctx, updateBlog,
		arg.ID,
		arg.Title,
		arg.Summary,
		arg.Content,
	)
	return err
}
