// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package postgres

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users(full_name, username, password)
VALUES ($1, $2, $3)
RETURNING id, full_name
`

type CreateUserParams struct {
	FullName string `json:"fullName"`
	Username string `json:"username"`
	Password string `json:"password"`
}

type CreateUserRow struct {
	ID       int64  `json:"id"`
	FullName string `json:"fullName"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRow(ctx, createUser, arg.FullName, arg.Username, arg.Password)
	var i CreateUserRow
	err := row.Scan(&i.ID, &i.FullName)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT full_name, username, about_me, created_at FROM users WHERE id = $1
`

type GetUserRow struct {
	FullName  string             `json:"fullName"`
	Username  string             `json:"username"`
	AboutMe   *string            `json:"aboutMe"`
	CreatedAt pgtype.Timestamptz `json:"createdAt"`
}

func (q *Queries) GetUser(ctx context.Context, id int64) (GetUserRow, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i GetUserRow
	err := row.Scan(
		&i.FullName,
		&i.Username,
		&i.AboutMe,
		&i.CreatedAt,
	)
	return i, err
}

const getUserAuthData = `-- name: GetUserAuthData :one
SELECT full_name, password, is_banned FROM users WHERE username = $1
`

type GetUserAuthDataRow struct {
	FullName string `json:"fullName"`
	Password string `json:"password"`
	IsBanned bool   `json:"isBanned"`
}

func (q *Queries) GetUserAuthData(ctx context.Context, username string) (GetUserAuthDataRow, error) {
	row := q.db.QueryRow(ctx, getUserAuthData, username)
	var i GetUserAuthDataRow
	err := row.Scan(&i.FullName, &i.Password, &i.IsBanned)
	return i, err
}

const getUserFull = `-- name: GetUserFull :one
SELECT full_name, username, about_me, is_admin, is_banned, created_at FROM users WHERE id = $1
`

type GetUserFullRow struct {
	FullName  string             `json:"fullName"`
	Username  string             `json:"username"`
	AboutMe   *string            `json:"aboutMe"`
	IsAdmin   bool               `json:"isAdmin"`
	IsBanned  bool               `json:"isBanned"`
	CreatedAt pgtype.Timestamptz `json:"createdAt"`
}

func (q *Queries) GetUserFull(ctx context.Context, id int64) (GetUserFullRow, error) {
	row := q.db.QueryRow(ctx, getUserFull, id)
	var i GetUserFullRow
	err := row.Scan(
		&i.FullName,
		&i.Username,
		&i.AboutMe,
		&i.IsAdmin,
		&i.IsBanned,
		&i.CreatedAt,
	)
	return i, err
}

const getUserPassword = `-- name: GetUserPassword :one
SELECT password FROM users WHERE id = $1
`

func (q *Queries) GetUserPassword(ctx context.Context, id int64) (string, error) {
	row := q.db.QueryRow(ctx, getUserPassword, id)
	var password string
	err := row.Scan(&password)
	return password, err
}

const getUserPublic = `-- name: GetUserPublic :one
SELECT full_name, about_me FROM users WHERE username = $1
`

type GetUserPublicRow struct {
	FullName string  `json:"fullName"`
	AboutMe  *string `json:"aboutMe"`
}

func (q *Queries) GetUserPublic(ctx context.Context, username string) (GetUserPublicRow, error) {
	row := q.db.QueryRow(ctx, getUserPublic, username)
	var i GetUserPublicRow
	err := row.Scan(&i.FullName, &i.AboutMe)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, full_name, username, is_admin FROM users ORDER BY created_at DESC
`

type ListUsersRow struct {
	ID       int64  `json:"id"`
	FullName string `json:"fullName"`
	Username string `json:"username"`
	IsAdmin  bool   `json:"isAdmin"`
}

func (q *Queries) ListUsers(ctx context.Context) ([]ListUsersRow, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListUsersRow{}
	for rows.Next() {
		var i ListUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.FullName,
			&i.Username,
			&i.IsAdmin,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsersCount = `-- name: ListUsersCount :one
SELECT count(1) FROM users
`

func (q *Queries) ListUsersCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, listUsersCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const listUsersPublic = `-- name: ListUsersPublic :many
SELECT full_name, username, about_me FROM users WHERE is_banned = false
`

type ListUsersPublicRow struct {
	FullName string  `json:"fullName"`
	Username string  `json:"username"`
	AboutMe  *string `json:"aboutMe"`
}

func (q *Queries) ListUsersPublic(ctx context.Context) ([]ListUsersPublicRow, error) {
	rows, err := q.db.Query(ctx, listUsersPublic)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListUsersPublicRow{}
	for rows.Next() {
		var i ListUsersPublicRow
		if err := rows.Scan(&i.FullName, &i.Username, &i.AboutMe); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsersPublicCount = `-- name: ListUsersPublicCount :one
SELECT count(1) FROM users WHERE is_banned = false
`

func (q *Queries) ListUsersPublicCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, listUsersPublicCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET 
    full_name = $2,
    username = $3,
    about_me = $4
WHERE id = $1
`

type UpdateUserParams struct {
	ID       int64   `json:"id"`
	FullName string  `json:"fullName"`
	Username string  `json:"username"`
	AboutMe  *string `json:"aboutMe"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.ID,
		arg.FullName,
		arg.Username,
		arg.AboutMe,
	)
	return err
}

const updateUserFull = `-- name: UpdateUserFull :exec
UPDATE users
SET 
    full_name = $2,
    username = $3,
    about_me = $4,
    password = $5,
    is_banned = $6
WHERE id = $1
`

type UpdateUserFullParams struct {
	ID       int64   `json:"id"`
	FullName string  `json:"fullName"`
	Username string  `json:"username"`
	AboutMe  *string `json:"aboutMe"`
	Password string  `json:"password"`
	IsBanned bool    `json:"isBanned"`
}

func (q *Queries) UpdateUserFull(ctx context.Context, arg UpdateUserFullParams) error {
	_, err := q.db.Exec(ctx, updateUserFull,
		arg.ID,
		arg.FullName,
		arg.Username,
		arg.AboutMe,
		arg.Password,
		arg.IsBanned,
	)
	return err
}
